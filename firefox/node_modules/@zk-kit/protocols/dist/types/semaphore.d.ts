import { MerkleProof } from "@zk-kit/incremental-merkle-tree";
import { SemaphoreFullProof, SemaphoreSolidityProof, SemaphoreWitness, StrBigInt } from "./types";
export default class Semaphore {
    /**
     * Generates a SnarkJS full proof with Groth16.
     * @param witness The parameters for creating the proof.
     * @param wasmFilePath The WASM file path.
     * @param finalZkeyPath The ZKey file path.
     * @returns The full SnarkJS proof.
     */
    static genProof(witness: any, wasmFilePath: string, finalZkeyPath: string): Promise<SemaphoreFullProof>;
    /**
     * Verifies a zero-knowledge SnarkJS proof.
     * @param verificationKey The zero-knowledge verification key.
     * @param fullProof The SnarkJS full proof.
     * @returns True if the proof is valid, false otherwise.
     */
    static verifyProof(verificationKey: string, { proof, publicSignals }: SemaphoreFullProof): Promise<boolean>;
    /**
     * Creates a Semaphore witness for the Semaphore ZK proof.
     * @param identityTrapdoor The identity trapdoor.
     * @param identityNullifier The identity nullifier.
     * @param merkleProof The Merkle proof that identity exists in Semaphore tree.
     * @param externalNullifier The topic on which vote should be broadcasted.
     * @param signal The signal that should be broadcasted.
     * @param shouldHash True if the signal must be hashed before broadcast.
     * @returns The Semaphore witness.
     */
    static genWitness(identityTrapdoor: StrBigInt, identityNullifier: StrBigInt, merkleProof: MerkleProof, externalNullifier: StrBigInt, signal: string, shouldHash?: boolean): SemaphoreWitness;
    /**
     * Generates a nullifier by hashing the external and the identity nullifiers.
     * @param externalNullifier The external nullifier.
     * @param identityNullifier The identity nullifier.
     * @returns The nullifier hash.
     */
    static genNullifierHash(externalNullifier: StrBigInt, identityNullifier: StrBigInt): bigint;
    /**
     * Converts a full proof in a proof compatible with the Verifier.sol method inputs.
     * @param fullProof The proof generated with SnarkJS.
     * @returns The Solidity compatible proof.
     */
    static packToSolidityProof(fullProof: SemaphoreFullProof): SemaphoreSolidityProof;
}
